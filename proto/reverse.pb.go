// Code generated by protoc-gen-go. DO NOT EDIT.
// source: reverse.proto

package reverse

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReverseRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseRequest) Reset()         { *m = ReverseRequest{} }
func (m *ReverseRequest) String() string { return proto.CompactTextString(m) }
func (*ReverseRequest) ProtoMessage()    {}
func (*ReverseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_142d12653d52cef8, []int{0}
}

func (m *ReverseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseRequest.Unmarshal(m, b)
}
func (m *ReverseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseRequest.Marshal(b, m, deterministic)
}
func (m *ReverseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseRequest.Merge(m, src)
}
func (m *ReverseRequest) XXX_Size() int {
	return xxx_messageInfo_ReverseRequest.Size(m)
}
func (m *ReverseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseRequest proto.InternalMessageInfo

func (m *ReverseRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ReverseReply struct {
	Reversed             string   `protobuf:"bytes,2,opt,name=reversed,proto3" json:"reversed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReverseReply) Reset()         { *m = ReverseReply{} }
func (m *ReverseReply) String() string { return proto.CompactTextString(m) }
func (*ReverseReply) ProtoMessage()    {}
func (*ReverseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_142d12653d52cef8, []int{1}
}

func (m *ReverseReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReverseReply.Unmarshal(m, b)
}
func (m *ReverseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReverseReply.Marshal(b, m, deterministic)
}
func (m *ReverseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReverseReply.Merge(m, src)
}
func (m *ReverseReply) XXX_Size() int {
	return xxx_messageInfo_ReverseReply.Size(m)
}
func (m *ReverseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReverseReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReverseReply proto.InternalMessageInfo

func (m *ReverseReply) GetReversed() string {
	if m != nil {
		return m.Reversed
	}
	return ""
}

func init() {
	proto.RegisterType((*ReverseRequest)(nil), "reverse.ReverseRequest")
	proto.RegisterType((*ReverseReply)(nil), "reverse.ReverseReply")
}

func init() { proto.RegisterFile("reverse.proto", fileDescriptor_142d12653d52cef8) }

var fileDescriptor_142d12653d52cef8 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4a, 0x2d, 0x4b,
	0x2d, 0x2a, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x54, 0xb8,
	0xf8, 0x82, 0x20, 0xcc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0x94,
	0xc4, 0x92, 0x44, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x49, 0x8b, 0x8b, 0x07,
	0xae, 0xaa, 0x20, 0xa7, 0x52, 0x48, 0x8a, 0x8b, 0x03, 0x6a, 0x40, 0x8a, 0x04, 0x13, 0x58, 0x1d,
	0x9c, 0x6f, 0x14, 0x0c, 0x37, 0x31, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x91, 0x8b,
	0x17, 0x26, 0x52, 0x52, 0x94, 0x99, 0x97, 0x2e, 0x24, 0xae, 0x07, 0x73, 0x0d, 0xaa, 0xdd, 0x52,
	0xa2, 0x98, 0x12, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x67, 0x1b, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x38, 0xe3, 0x07, 0xce, 0xc7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReverseServiceClient is the golang-grpc-client API for ReverseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReverseServiceClient interface {
	ReverseString(ctx context.Context, in *ReverseRequest, opts ...grpc.CallOption) (*ReverseReply, error)
}

type reverseServiceClient struct {
	cc *grpc.ClientConn
}

func NewReverseServiceClient(cc *grpc.ClientConn) ReverseServiceClient {
	return &reverseServiceClient{cc}
}

func (c *reverseServiceClient) ReverseString(ctx context.Context, in *ReverseRequest, opts ...grpc.CallOption) (*ReverseReply, error) {
	out := new(ReverseReply)
	err := c.cc.Invoke(ctx, "/reverse.ReverseService/ReverseString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReverseServiceServer is the golang-grpc-server API for ReverseService service.
type ReverseServiceServer interface {
	ReverseString(context.Context, *ReverseRequest) (*ReverseReply, error)
}

// UnimplementedReverseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReverseServiceServer struct {
}

func (*UnimplementedReverseServiceServer) ReverseString(ctx context.Context, req *ReverseRequest) (*ReverseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseString not implemented")
}

func RegisterReverseServiceServer(s *grpc.Server, srv ReverseServiceServer) {
	s.RegisterService(&_ReverseService_serviceDesc, srv)
}

func _ReverseService_ReverseString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReverseServiceServer).ReverseString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reverse.ReverseService/ReverseString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReverseServiceServer).ReverseString(ctx, req.(*ReverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReverseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reverse.ReverseService",
	HandlerType: (*ReverseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReverseString",
			Handler:    _ReverseService_ReverseString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reverse.proto",
}
